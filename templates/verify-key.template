#!/usr/bin/env perl
use warnings;
use strict;

our $VERSION = '0.1.0';

#
#    This file is part of Mopslig.
#
#    Mopslig is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Mopslig is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Mopslig.  If not, see <http://www.gnu.org/licenses/>.
#


use PAR;
use Crypt::PBKDF2;
use Crypt::PBKDF2::Hash::HMACSHA2;
use Getopt::Long;

GetOptions('build-id'=>\my $build_id, 'key=s' => \my $key , 'help'=>\my $help);

=pod

=head1 DESCRIPTION

Verify license key

=head1 Usage

Usage:

$0          --serial    key to verify
            --build-id  display build-id

=head2 Exit codes
        0 - key is valid
        1 - key is invalid
=cut
if( $help ) {
    usage();
    exit(0);
}


my $build_id_val = "MOPSLIG_BUILD_ID";

if( $build_id ) {
    print $build_id_val."\n";
    exit;
}

unless ($key) {
    usage();
    exit(2);
}

sub usage {
    print <<EOL;

Verify license file

Usage:

$0\t--key \tkey to verify
\t\t--buid-id\tdisplay build-id

Exit codes:

0   key is valid
1   key is invalid
2   missing key

EOL
}


my @hashes = qw(
MOPSLIG_VERIFY_HASHES
    );


sub verify_key {
    my $key    = shift;
    my $hashes = shift;
    my $i      = 0;
    my $sum    = scalar( @{$hashes} );

    my $hash_class = 'HMACSHA2';
    my $sha_size   = 512;
    my $salt_len   = 10;
    my @balik_data;
    my $prefix = '{X-PBKDF2}HMACSHA2+512:AAAD6A:';

    my $pbkdf2 = Crypt::PBKDF2->new(
        hash_class => $hash_class,
        hash_args  => { sha_size => $sha_size },
        salt_len   => $salt_len
    );

    foreach my $enc_hash ( @{$hashes} ) {
        my $full = $prefix.$enc_hash;

        if ( $pbkdf2->validate($full, $key ) ) {
            return $key;
        }
    }

}


if( verify_key($key,\@hashes) ) {
   exit(0);
} else {
    exit(1);
}
